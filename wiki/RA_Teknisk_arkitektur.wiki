#summary Introduktion till den tekniska arkitekturen.
#labels RA

= Innehåll = 

<wiki:toc max_depth="3" />

= Introduktion =

Den tekniska arkitekturen innehåller principer och detaljerade riktlinjer för hur de logiska referensmodellerna konkret skall implementeras:

    * Styrande principer som bestämmer hur system skall designas för att uppfylla visionen.
    * Konkreta regelverk/anvisningar som hjälper projekten att uppfylla principerna
    * Exempelapplikationer och Proof of Concepts (PoC)
    * Ramverkskod, verktyg för kodgenerering etc 

= Styrande principer = 

Följande så kallade _styrande principer_ skall vara gällande i alla implementationer: 

  * Principen om kanoniska tjänstegränssnitt
  * Principen för organisationsoberoende
  * Principen för löst kopplade tjänster
  * Skiktprincipen
  * Grundfunktionsprincipen
  * Principen ”En funktion en lösning”
  * Samverkansprincipen
  * Ägarskapsprincipen

== Principen om kanoniska tjänstegränssnitt == 

Integrationstjänster skall organiseras i _verksamhetsdomäner_ och publiceras i namnrymder motsvarande dessa domäner.  

En _tjänstedomän_ är en uppsättning gränssnittsdefinitioner för en verksamhetsdomän, t.ex. "Beställning och Svar". 

All integration mellan processer och system sker via dessa s.k. kanoniska gränssnitt.

== Principen för organisationsoberoende == 

System ska i alla avseenden kunna användas på nationell nivå, t.ex. ska tjänstegränssnitt och informationsmodeller ha en nationell vy av informationen.

== Principen för löst kopplade tjänster == 

All integration sker mot integrationstjänster publicerade av _Plattform för Tjänsteorienterad Integration_ (PTI) - inte direkt mot publicerande system. PTI ska fungera som en regionövergripande tjänste-mäklare som synliggör alla regionens tjänster via kanoniska gränssnitt och ansvarar för samverkan med nationella tjänster.

== Skiktprincipen == 

Systems presentationsskikt ska kunna kompletteras eller ersättas utan ingrepp i applikationslogiken. 

== Grundfunktionsprincipen == 

System ska baseras på gemensamma grundfunktioner - inte inkludera interna motsvarigheter.

== Principen "En funktion en lösning" ==

Vi eftersträvar en lösning för varje funktion. Systemstöd ska upphandlas, utvecklas och driftsättas med detta i åtanke. Denna princip relaterar till Grundfunktionsprincipen.

== Samverkansprincipen ==

System ska vara anslutna till regionala och nationella standards för samverkan, där så är tillämpbart. Vid upphandling tas hänsyn till standards under utveckling.

Standards som i en framtid förväntas bli tillämpbara: 
  * Teknisk samverkan: BIF, Teknisk RIV, Siths etc
  * Semantisk samverkan: HL7, … 

== Ägarskapsprincipen ==

Referensarkitekturens instansiering ska ske i harmoni med organisationens ansvarsstrukturer. Detta kan leda till kompromisser mellan ideal arkitektur och krav på livscykelhantering.

Tjänstedomäner och system ska ha definierade ägare för livscykelns alla faser. Respektive systemförvaltare äger sina anpassningskomponenter, även om de tekniskt realiseras i PTI.

= Detaljerade anvisningar = 

Den tekniska arkitekturen definierar detaljerade anvisningar inom en rad områden: 

*Ramverk/komponenter:*
  * *[RA_Strukturerad_Forteckning]* Beskriver de externa komponenter/ramverk som ska användas inom respektive område. 

*Utvecklingsmiljö och "komma igång" (Java EE):*
  * *[RA_Anvandarmanual_Utvecklingsmiljo]* Beskriver hur man praktiskt sätter upp sin utvecklingsmiljö för att komma igång med utveckling av RA-system och komponenter. 

*Källkodsstruktur:*
  * *[RA_Anvandarmanual_Kallkodstruktur]* Beskriver källkodsstrukturen och dess koppling till referensarkitekturen. 
  * *[RA_Anvandarmanual_Beroenden_Mellan_Komponenter]* Beskriver hur beroenden inom och mellan verksamhetskomponenter fungerar. 

*Anvisningar för utveckling av system och verksamhetskomponenter (Java EE):*
  * *[http://oppna-program.googlecode.com/svn/reference-architecture/Teknisk_arkitektur/Systemutveckling/JavaEE/Anvisningar_Anslutningsskikt_Webb.doc Anvisningar_Anslutningsskikt_Webb.doc]* Beskriver hur man utvecklar webbapplikationer, inkl den valda teknikstacken för Java EE-webblagret. 
  * *[RA_Anvandarmanual_Verksamhetsskikt]* Beskriver hur man utvecklar en verksamhetskomponents verksamhetsskikt i Java. (Se även [RA_Anvandarmanual_Anslutningsskikt_WebServices].)

*Anvisningar för portletutveckling (Java EE):*
  * *[http://oppna-program.googlecode.com/svn/reference-architecture/Teknisk_arkitektur/Systemutveckling/JavaEE/Anvisningar_Anslutningsskikt_Portlet.doc Anvisningar_Anslutningsskikt_Portlet.doc]* Beskriver hur man utvecklar portlets.  

*Konfigurationshantering:* 
  * *[http://oppna-program.googlecode.com/svn/reference-architecture/Teknisk_arkitektur/Systemutveckling/Generellt/Konfigurationshantering/Anvisningar_Konfigurationshantering.doc  Anvisningar_Konfigurationshantering.doc]* Detaljerade anvisningar om hur man versionerar maven-artefakter, lablar i subversion etc. 
  * *[http://oppna-program.googlecode.com/svn/reference-architecture/Teknisk_arkitektur/Systemutveckling/Generellt/Konfigurationshantering/Anvisningar_Verktyg_Subversion.doc   Anvisningar_Verktyg_Subversion.doc]* Kortfattad anvisning om subversion.

*Kontinuerlig integration:*
  * *[http://oppna-program.googlecode.com/svn/reference-architecture/Teknisk_arkitektur/Systemutveckling/JavaEE/Anvisningar_Kontinuerlig_Integration.doc   Anvisningar_Kontinuerlig_Integration.doc]* Beskriver hur man sätter upp kontinuerlig integration för projekt med hjälp av verktyget Continuum. OBS: Informationen är inaktuell och behöver uppdateras efter open sourcening. ||


*Web Services:*
  * *[http://oppna-program.googlecode.com/svn/reference-architecture/Teknisk_arkitektur/Systemutveckling/Generellt/WebServices/Anvisningar_WSDL-design.doc Anvisningar_WSDL-design.doc]* Detaljerade anvisningar för wsdl-design. Versionshanteringsstrategin förtydligas ytterligare genom PoC. 
  * *[http://oppna-program.googlecode.com/svn/reference-architecture/Teknisk_arkitektur/Systemutveckling/Generellt/WebServices/Anvisningar_for_versionering_av_XML-Scheman.doc Anvisningar_for_versionering_av_XML-Scheman.doc]* Detaljerade anvisningar för versionering av XML-scheman. Versionshanteringsstrategin förtydligas ytterligare genom PoC. 
  * *[RA_Anvandarmanual_Anslutningsskikt_WebServices]* Beskriver hur man skall implementerar webservices i Java, gäller både för integrationstjänster och komponenttjänster (i de fall komponenttjänsterna är implementerade som web services). 

 


= Exempelapplikationer och Proof of Concept =
== Exempelapplikationer == 

Exempelapplikationernas syfte är att visa olika aspekter av referensarkitekturen. I dagsläget finns en exempelapplikation, _addressbook_.  

=== Addressbook === 

"Addressbook" är ett system med följande verksamhetskomponenter: 

  * "address" är en entitetskomponent som innehåller funktionalitet för att hantera adress-information. Verksamhetskomponenten innehåller både en webbapp (som visar hur ramverken Facelets och Spring Webflow ska användas) och en integrationstjänst, som visar hur man implementerar system-till-system-integration. 
  * "address-wsclient" är ett exempel på en processkomponent som implemnenterar en webservice-klient. Det är ett litet exempel med fokus på att visa hur man implementerar klient-delen av en webservice. 

== Proof of Concept == 

Proof of Concept (PoC)-projekten ska inte bestraktas som exempel/instansieringar av referensarkitekturen. De utgör istället "bevis" på olika tekniska aspekter av referensarkitekturen - och kan användas som exempel på dessa specifika aspekter. 

I dagsläget finns det ett PoC som bevisar versioneringsstrategin av webservices (WSDL-filer och XML-scheman).

=== Schema-versioning === 
Detta PoC syftar till att bevisa versioneringsstrategin för web services och xml scheman  som återfinns i [http://oppna-program.googlecode.com/svn/reference-architecture/Teknisk_arkitektur/Systemutveckling/Generellt/WebServices/Anvisningar_WSDL-design.doc Anvisningar_WSDL-design.doc] och [http://oppna-program.googlecode.com/svn/reference-architecture/Teknisk_arkitektur/Systemutveckling/Generellt/WebServices/Anvisningar_for_versionering_av_XML-Scheman.doc Anvisningar_for_versionering_av_XML-Scheman.doc] och utgör exempel på hur man konkret går till väga när man versionerar sina webservices.  Exemplet är förändrat/förenklat i några avseenden gentemot en "riktig" implementation:

  * Webservicarna (dvs endpoint-projekten) är gjorda för att kunna köras standalone (men de går även att deploya till Tomcat). I ett normalt scenario skulle webservice implementationen deployas till en applikationsserver.
  * Klienterna är vanliga java-appliationer.
  * För att exemplet skall bli tydligt är WSDL- och Schema-filer är namngivna med fullständig version. I ett verkligt scenario skall filerna namnges enligt de regler som finns beskrivna i dokumenten ovan.

PoC't består av en web service i 3 olika (minor) versioner, 1.0, 1.1 samt 1.2 med tillhörande server-implementationer och klienter. WSDL och Schema-filer är definierade i projekten:

  * schema-v1.0
  * schema-v1.1
  * schema-v1.2

I ovanstående projekt återfinns även genererad server- och klientkod för respektive version av tjänsten.

I schema-filerna har xsd:any använts för att uppnå framåt- och bakåtkompatibilitet, se mer i [http://oppna-program.googlecode.com/svn/reference-architecture/Teknisk_arkitektur/Systemutveckling/Generellt/WebServices/Anvisningar_for_versionering_av_XML-Scheman.doc Anvisningar_for_versionering_av_XML-Scheman.doc].

I endpoint-modulerna finns en dummy-implementation av respektive version av tjänsten:

  * endpoint-v1.0
  * endpoint-v1.1
  * endpoint-v1.2

Motsvarande klienter återfinns i:

  * client-v1.0
  * client-v1.1
  * client-v1.2

Både endpoints och klienter har beroenden (maven-dependencies) till schema-projekten (respektive version är mappad mot samma schema-version, dvs endpoint-v1.2 och client-v1.2 är beroende av schema-v1.2 osv).

Utöver dessa projekt finns ett projekt, common, som innehåller viss gemensam kod för att att köra web services och klienter. Notera att denna kod inte är tänkt för skarpa webservices, utan bara visar på versioneringsstrategin.

Alla versioner av klienten skall gå att köra mot alla versioner av endpointen, dvs exemplet visar att strategin uppfyller både framåt- och bakåtkompatibilitet.  




 
