#summary Beskriver en logiska referensarkitekturen inkl referensmodellerna.
#labels RA
= Innehåll =

<wiki:toc max_depth="3" />

= Introduktion =

== Förkortningar och termer == 

|| *Förkortning* || *Betydelse* ||
|| VGR || Västra Götalandsregionen ||
|| SSL || Stockholms Läns Landsting ||
|| 3R || Samarbete mellan tre regioner; VGR, Region Skåne och SLL ||
|| RIV || Regelverk för interoperabilitet i vården ||
|| BIF || Bastjänster för informationsförsörjning ||
|| DMIM || ||
|| OSOA || Open Service Oriented Architecture - Organisationen bakom bland annat SCA ||
|| SCA || Service Component Architecture ||


== Bakgrund ==
Här beskrivs den logiska delen av den referensarkitektur som har tagits fram gemensamt inom 3R och släppts som öppen källkod av VGR här under öppna program. 

Referensarkitekturen innefattar även en mer konkret och implementationsnära teknisk arkitektur, se [RA_Teknisk_arkitektur].

== Syfte ==

Den logiska referensarkitekturens viktigaste innehåll är dess metamodeller, så kallade _referensmodeller_. Dessa definierar det vokabulär som skall användas när man talar om arkitektur, och svarar på frågor som "Vad menar vi med ett _system_ och hur förhåller det sig till en _komponent_?" etc.

Alla IT-lösningar som upphandlas och utvecklas skall baseras på dessa referensmodeller. Syftet med den logiska arkitekturen och referensmodellerna är alltså att definiera den taxonomi som tillämpas både internt och i kommunikationen med leverantörer samt den struktur som förväntas av de lösningar som byggs eller upphandlas.

Se även [RA_Introduktion] för övergripande syfte med att ha en referensarkitektur. 

== Referenser ==
=== Allmänt ===
|| *Organisation* || *Dokument* || *Beskrivning* ||
|| 3R || Modell Referensarkitektur 3R|| Modell för referensarkitektur (format: eap / enterprise Architect) ||

=== Yttre arkitektur ===

|| *Organisation* || *Dokument* || *Beskrivning* ||
|| !CarLink Plus || Referensarkitektur Rapport 2 April 2004. || - ||
|| HISA || HISA (Healthcare Information Service Architecture). || Detta dokument refereras från !CareLink Plus. Dokumentet utgör en möjlig bas för fortsatt detaljering av den yttre arkitekturen, m.a.p process-orienterad integration. HISA defnierar bl.a. en metod för identifiering av tjänstedomäner. ||

=== Inre arkitektur ===

|| *Organisation* || *Dokument* || *Beskrivning* ||
|| OSOA || [http://www.osoa.org/display/Main/Service+Component+Architecture+Home SCA] || Innehåller ett antal specifikationer kring SCA. ||

Se [RA_Introduktion] för länkar till övriga dokument inom referensarktekturen.

= Sammanfattning - viktigt innehåll =
Den logiska referensarkitekturen är uppdelad i en inre och en yttre arkitektur. Arkitekturen är formaliserad med hjälp av referensmodeller, ett slags metamodeller som beskriver termer/entiteter samt hur dessa relaterar till varandra. 

Referensmodellerna består av två delar: en referensmodell för den _inre_ arkitekturen och en referensmodell för den _yttre_ arkitekturen.

Den inre arkitekturen beskriver principer för arkitekturen inom de _system_ som utvecklas eller upphandlas. Varje system modulariseras genom att delas upp i ett antal _verksamhetskomponenter_. Den inre arkitekturen bygger på principerna för SCA. 

Den yttre arkiteturen beskriver hur systemen integreras med varandra genom en tjänsteorienterad arkitektur. Referensmodellen för den yttre arkitekturen definierar _integrationstjänster_, vilket är de tjänster som krävs för integration av verksamhetens processer. Integrationstjänsterna är indelade i olika _tjänstedomäner_. 

Kopplingen mellan den inre och den yttre arkitekturen utgörs av att en tjänstedomän, i normal- och idealfallet, är lika med ett system. Det är _verksamhetskomponenterna_ som publicerar de integrationstjänster som behövs för att systemet ska kunna integreras med andra system. 


Yttre arkiteturer - dvs specifikationer av integrationstjänster - drivs fram och ägs av en _Enterprise Architecture_-funktion. Inre arkitektur – de verksamhetskomponenter som sammantaget realiserar beställd funktionalitet inom ramen för en tjänstedomän/ett system – bildar ett fristående förvaltningsobjekt. Enterprise Architecture bistår projekten vid modellering av inre arkitetur, men tar inget ägarskap för modellerna.

Referensarkitekturen är framtagen gemensamt för ”3R” (tre regioner: VGR, Region Skåne, SLL), men kan påföras restriktioner drivna av regionala krav. Dessa region- eller tjänstedomän-specifika anvisningar kallas _profiler_. 

Dokumentet ger en överblick över hur spårbarhet ska åstadkommas från modeller i den logiska vyn till modeller i de teknologiska och tekniska vyerna. Detaljerna för spårbarhet återfinns i underliggande teknologi-specifika anvisningar. 

Följande listning redovisar de viktigaste aspekterna av spårbarhet som behöver åskådliggöras:
  * Spårbarhet till plattformsspecifik design för de plattformar 3Rs EA avser omfatta
  * Spårbarhet till strukturer för konfigurationsstyrning av systems beskrivning och realisering. Här avses strukturer i såväl modeller som testfall, funktionalitet och projektdefinitioner för utvecklingsverktyg.
  * Spårbarhet till katalogstrukturer (repositorier) för versionsindikerade tekniska tjänstespecifkationer (t.ex. XSD, WSDL)
  * Spårbarhet till komponentkataloger för plattformsspecifika binärer (enheter för komponentbaserad återanvändning inom ett system)
  * Spårbarhet till namnrymder för såväl integrationstjänster som verksamhetskomponenter.

= Den yttre arkitekturen =

http://oppna-program.googlecode.com/svn/wiki/bilder/RA/latest/RA_Logisk_arkitektur_Yttre_ark_Refmodell.png
_Bilden visar referensmodellen för den yttre arkitekturen._ 

Den yttre arkitekturen består av ett antal _verksamhetsdomäner_ (ex Vård, Läkemedel etc), som i sin tur innehåller ett antal _tjänstedomäner_. Varje tjänstedomän innehåller en eller flera _integrationstjänster_. En integrationstjänst är antingen _orkestrerande_ eller _atomär_. 

== Orkestrerande integrationstjänster ==

En orkestrerande integrationstjänsts syfte är att orkestrera en process. De har ett primärt gränssnitt samt en eller flera så kallade _partner-länkar_. Det primära gränssnittet har som regel bara en operation, vars semantik därför är likvärdig med tjänsten som helhet. Orkestrerande processer definieras alltså i termer av den process de orkestrerar, snarare än av en uppsättning operationer. Processbeskrivningen kan ses som en del av tjänstedefinitionen. Den behöver inte vara exekverbar, men är förmodligen uttryckt i en notation som är närliggande dess exekverbara motsvarighet. 

En partner-länk är ett beroende till en atomär integrationstjänst. De atomära integrationstjänsterna kan vara synkrona (uppdrag/svar), asynkrona envägs eller asynkrona tvåvägs. För länkar till asynkrona tvåvägstjänster tillkommer en svarstjänst, genom vilken partnern, dvs de atomära tjänsten, levererar det asynkrona svarsmeddelandet. Denna svarstjänst ägs av den atomära tjänsten och hör till dess tjänstedomän men måste implementeras av den orkestrerande tjänsten. 

En asynkron tvåvägstjänst kan också innefatta en svarstjänst för att ta emot felmeddelanden, vilken, på samma vis som svarstjänsten, implementeras av den orkestrerande tjänsten. 

== Atomära integrationstjänster ==

De atomära tjänsternas gränssnitt är just gränssnitt i traditionell bemärkelse. De representerar ett informationsobjekt eller en uppgift och därmed associerade operationer. En atomär tjänst har inga beroenden på gränssnittsnivå till andra tjänster. De representerar atomära transaktioner med ickefunktionella krav på ”allt eller inget”. En atomär integrationstjänst kan vara synkron eller asynkron. 

Notera att definitionen av en atomär integrationstjänst inte gör några antaganden om realiseringens arkitektur (detta definieras av den inre arkitekturen).

=== Synkrona, atomära tjänster ===

En synkron tjänst definieras av traditionella uppdrag/svar-operationer. 

=== Asynkrona, atomära tjänster ===

En asynkron tjänst kan vara antingen envägs- eller tvåvägs. I båda fallen finns ett uppdragsgränssnitt med envägsoperationer (utan svar). I fallet tvåvägstjänst finns dessutom ett svarsgränssnitt – också detta med envägsoperationer. Svarsgränssnittet måste realiseras av den eller de orkestrerande tjänst(er) som skall anropa den asynkrona integrationstjänsten, dvs som har en partnerlänk till den.  

Asynkrona envägstjänster används i första hand för att synkronisera information som föds ur systemarvet~~ eller för start av en asynkron orkestrerande integrationstjänst~~.*???* 

Asynkrona tvåvägstjänster är till för att möjliggöra asynkron orkestrering från en orkestrerande integrationstjänst. Dessa tjänster kan vara av batch-liknande karaktär, eller av andra skäl lämpa sig bäst för asynkron integration.

Som vi såg ovan är ägarskap av gränssnitt olika för orkestrerande och för atomära integrationstjänster. Atomära integrationstjänster äger såväl det producerande som eventuella konsumerande gränssnitt (dvs svarsgränssnitten). Av detta följer att orkestrerande integrationstjänster endast äger det primära gränssnittet. Syftet med dessa ägasrskapsregler är att behålla de atomära integrationstjänsternas obereonde till sin omgivning.

== Exempel ==
http://oppna-program.googlecode.com/svn/wiki/bilder/RA/latest/RA_Logisk_arkitektur_Yttre_ark_exempel.png

Bilden illustrerar tre tjänstedomäner, varav en (tjänstedomän B) är en process-nära tjänstedomän bestående av en orkestrerande integrationstjänst. Tjänstedomän A och C består av ett antal atomära integrationstjänster. Illustrationen visar inte att tjänstedomänerna i sin tur kan delas in i verksamhetsdomäner.

Den orkestrerande tjänsten i tjänstedomän B har två partnerlänkar, en till en asynkron tvåvägstjänst i tjänstedomän A och en till en synkron tjänst i tjänstedomän C.

Notera att svarsgränssnittet för en den asynkrona tvåvägstjänsten hör hemma i tjänstedomän A. Detta förhållande framgår inte av illustrationen, där svarsgränssnittet felaktigt tycks ägas av den orkestrerande integrationstjänsten (vilket skulle innebära att det hamnar i fel tjänstedomän). 

= Den inre arkitekturen =
Aktivering av funktionalitet kräver inte integration eller integrationstjänster. Integrationstjänster syftar till att realisera integrationsbehov, mellan tjänstedomäner. De teknologier och koncept på vilka integrationstjänster vilar, är inte lämpade för modularisering av funktionalitet i syfte att nå återanvändning, reducera komplexitet eller standardisera implementationen av verksamhetsregler.

Vi behöver därför en inre arkitektur, som definierar principer för varje systems interna arkitektur. Den inre arkitekturen måste innefatta ett angreppssätt för modularisering, som är tillräckligt lättviktigt och tillräckligt väl integrerat i vald realiseringsplattform för att inte vara i konflikt med dessa mål.

http://oppna-program.googlecode.com/svn/wiki/bilder/RA/latest/RA_Logisk_arkitektur_Inre_ark_Refmodell.png
_Referensmodell för den inre arkitekturen._

Huvudentiteten i referensmodellen för den inre arkitekturen är ett _system_. Grunden för modulariseringen inom system är en enhet som kallas _verksamhetskomponent_, varje system består av ett antal, hierarkiskt ordande, verksamhetskomponenter. 

== Verksamhetskomponenter ==

En verksamhetskomponent är en relativt stor enhet som representerar ett väl avgränsat funktionsområde/begrepp. Begreppet skall vara relevant för verksamheten och av tillräcklig omfattning för att vara synligt i planer, funktionella beskrivningar, konfigurationsstyrning, ändringshantering och leveranshantering. Det betyder att dess realisering kan spänna över så väl användargränssnitt, som verksamhetsregler och informationshanteringsregler. Detta gäller oavsett komponentens typ, även om tyngdpunkten mellan skikten förskjuts beroende på dess klassificering. 

En verksamhetskomponent klassificeras efter den typ av funktionalitet den representerar: processorienterad, informationsorienterad (entitetskomponent), adapter eller generell / stödjande karaktär (plattformskomponent). 

http://oppna-program.googlecode.com/svn/wiki/bilder/RA/latest/RA_Logisk_arkitektur_Inre_ark_Verksamhetskomponent.png

_En verksamhetskomponent och dess skikt._

En verksamhetskomponent kan består av upp till tre skikt, anslutningsskikt, verksamhetsskikt och resursskikt. Tyngdpunkten beror på vilken typ av komponent det är och i vissa fall kan något eller några skikt uteslutas helt. 

Anslutningsskiktet innehåller gränssnitt i form av implementerade integrationstjänster och användargränssnitt. 

Verksamhetsskiktet innehåller verksamhetsregler och resursskiktet innehåller informationshanteringsregler. 

=== Processkomponent ===
En processkomponents funktionalitet representerar en aktivitet eller process. De regler som allokeras till en processkomponent har ofta sitt ursprung i ett användningsfall eller processmodell. Processkomponenten har sin tyngdpunkt i verksamhets- och anslutningsskiktet. Anslutningsskiktet realiserar ofta integrationstjänster (SOA-tjänster), användartjänster (t ex portlets, eller en dialog i en rik klient) eller både och. Om anslutningsskiktet i processkomponenten realiserar en orkestrerande integrationstjänst (t ex i form av ett bpel-skript), saknas i regel övriga skikt. 

Verksamhetsskiktet i en processkomponent är av uppgiftsorienterad karaktär. Om anslutningsskitet definierar en användardialog, kan distribuerad kommunikation krävas mellan anslutningsskiktet och verksamhetsskiktet (en så kallad rik klient). Det är dock önskvärt att anslutningsskiktet i detta fall delas upp i den distribuerade dialoghanteringen och en server-del med specifikt ansvar för att ansluta dialog-delen. På så sätt minskas verksamhetsskiktets beroende till klienten. Man får dessutom en beredskap för att realisera sessionbaserad hantering på server-sidan, vilket inte kan ske i verksamhetsskiktets tillståndslösa komponenttjänster. 


=== Entitetskomponent === 
En _entitetskomponent_ (informationsorienterad) representerar regler för åtkomst och lagring av en logiskt sammanhängande delmängd av en informationsmodell. Dessa regler beskrivs i det undre av tre möjliga skikt: resursskiktet. Det överliggande verksamhetsskitet beskriver regler av mer bearbetande karaktär, som spänner över flera av de ägda informationsobjekten. Dessa regler kan också referera till andra – i hierarkin underordnade – entitetskomponenter. Regler som rör presentation, flödesstyrning och rent allmänt att reagera på händelser från omgivningen, beskrivs i det översta skiktet, kallat anslutningsskikt. Anslutningsskiktet kan definiera ett användargränssnitt för administration av den ägda informationen. Detta ska inte vara ett processtödjande gränssnitt, utan enbart erbjuda informationstjänster som är hårt kopplade till den ägda informationen. Anslutningsskiktet kan också fånga händelser från systemets omgivning genom att realisera integrationstjänster. Mellan skikten definieras gränssnitt, som kallas komponenttjänster. De översätts direkt från UML till plattformens motsvarighet för gränssnittsdefinitioner (t.ex. Java-interface). Verksamhetskomponenter samverkar så väl intern som mellan komponenttjänster. Samverkan mellan verksamhetskomponenter sker alltid i harmoni med den hierarkiska struktur i vilken verksamhetskomponenterna är inordnade. Integration mellan komponenttjänsterna tillåts bara inom ett system. Hur stor är då en entitetskomponent? En entitetskomponents ansvar täcker den mängd regler, verksamhetstjänster och dataaccesstjänster som blir följden av att ha ägarskap för ett utsnitt om 5 – 40 instansklasser i en traditionellt modellerad ”blomblad”. (...med reservation för att HL7 ställer detta mätetal på kant)

Transaktionshantering är formaliserad med avseende på samverkan mellan komponenttjänster. Den komponenttjänst (operation i tjänsten) som ligger överst i en anropskedja (alltid anropad från anslutningsskiktet i den egna verksamhetskomponenten) ansvarar för all underliggande uppdatering av databaser koordineras i form av en atomär transaktion. 
Krav på behörighetskontroll definieras genom policy på operationer i komponenttjänster. Behörighetskrav är naturligt ett ansvar för de funktioner som har kunskap kring det data som hanteras. Det finns dock stor potential för rationalisering och ökad robusthet, om policy kan representeras även i den tekniska realiseringen. Såväl Java- som .Net-plattformen har en mekanism som lämpar sig väl för deklarativ anslutning till behörighetsfunktionen. I Java-plattformen kan anrop till behörighetsfunktionen generaliseras till s.k. Annoteringar. Motsvarigheten i .Net kallas Attribut. Detta förutsätter att anslutningsskiktet har en generell - och helst transparent - mekanism för att tillgängliggöra biljett-information via trådkontexten. 

Denna plötsliga tekniska djupdykning kan tyckas malplacerad. Den är dock viktig för att underbygga förtroende för ansatsens realiserbarhet. Om vi associerat ansvaret för behörighetskontroll till integrationstjänster (d.v.s. anslutningsskiktet för verksamhetskomponenter som realiserar integrationstjänster), hade vi introducerat en risk för redundans. Verksamhetskomponenter anropar varandra via komponenttjänster. En komponenttjänst i en entitetskomponent som anropas i tre led med ursprung i en processkomponent måste fortfarande ta ansvar för behörighetskontroll för den informationsåtkomst entitetskomponenten ansvarar för.

=== Adapterkomponent ===
Adapterkomponenter används för att anropa funktioner som inte har integroperabilitet enligt referensarkitekturen, dvs externa system som *inte* erbjuder tjänster enligt den yttre arkitekturen.

=== Plattformskomponent === 

http://oppna-program.googlecode.com/svn/wiki/bilder/RA/latest/RA_Logisk_arkitektur_Plattformstjanster.png
_Exempel plattoformskomponenter_

En plattformskomponent är en komponent av generell/stödjande karaktär, vanligtvis tekniskt orienterad.

Plattformskomponenter som bedöms vara av allmänt värde – även utanför det system de tillhör, kan  propageras till verksamhets/systemövergripande plattformsfunktioner. Dessa ägs då av EA-ramverket, som kan sägas representera en ”virtuell” domän uppdelad i tekniska tjänstedomäner i syfte att inordna delade plattformskomponenter i referensarkitekturens strukturer.

== Exempel == 

http://oppna-program.googlecode.com/svn/wiki/bilder/RA/latest/RA_Logisk_arkitektur_Inre_ark.png
_Bilden illustrerar ett system och dess verksamhetskomponenter_

Två av processkomponenterna i bilden realiserar inte någon integrationstjänst, men har trots detta ett anslutningsskikt. Det innebär att komponenterna definierar en eller flera användartjänster.



= Samverkan yttre och inre arkitektur =

http://oppna-program.googlecode.com/svn/wiki/bilder/RA/latest/RA_Logisk_arkitektur_Samverkan.png

Bilden illustrerar samverkan mellan yttre och inre arkitektur.

En mängd samverkande verksamhetskomponenter bildar ett System. Samverkan mellan system kallas integration och ska ske via atomära integrationstjänster som koordineras av orkestrerande integrationstjänster, enligt principer definierade av den yttre referens arkitekturen. Grunden för vad som bildar ett system, är i idealfallet den samma som för en tjänstedomän. Bilden illustrerar ett schematiskt exempel på detta förhållande.
 
Tjänstedomänens integrationstjänster utgör systemets gränsyta. Tjänstedomän ”A” ovan representerar ett typiskt operativt verksamhetsstöd för en del av vårdprocessen. Systemet kan ha upphandlats av en leverantör. Tjänstedomänens (och systemet) funktionella ansvar definieras av en ”blombladsmodell” och den funktionalitet den syftar till att understöda. System ”C” i bilden är av samma karaktär. Enterprise Architecture för 3R har definierat de integrationstjänster som krävs för att funktionaliteten ska kunna integreras i den övergripande vårdprocessen. Integrationstjänsterna representerar m.a.o. de strategiska behoven av integration av verksamhetens processer. Tjänstedomänen ”B” representerar däremot själva integrationen av vårdprocessen (eller en viktig aspekt av integrationen). Den består således huvudsakligen av orkestrerande integrationstjänster. Dessa realiseras av ett för domänen vigt system – nämligen System ”B”. System ”B” är uppbyggt av sinsemellan oberoende processkomponenter. Var och en av dessa realiserar en orkestrerande integrationstjänst. De består således bara ett anslutningsskikt med tänkt realisering i WS-BPEL.

= Exempel profil =
Profiler används för att reducera frihetsgraden för ett specifikt system eller organisation. En profil kan också användas för att härleda nya termer från existerande. Nedanstående profil-exempel illustrerar båda fallen.

  # Integrationstjänster realiseras uteslutande av Entitetskomponenter.
  # Entitetskomponenter exporterar (publicerar) inte användartjänster.
  # Entitetstjänsterna i Resursskiktet realiseras m.h.a. HTBs datatjänster 
  # En Tillämpning definieras som en eller flera Process-komponenter begränsade av följande regler:
    # Anslutningsskikt med enbart Användartjänster (Integrationstjänster publiceras ej). 
    # Resursskikt saknas.
    # Komponenttjänster i andra verksamhetskomponenter refereras ej.




 