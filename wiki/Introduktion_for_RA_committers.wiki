#summary Här beskrivs det man behöver veta som ny utvecklare/committer i själva referensarkitekturprojektet.
#labels Project-RA

= Innehåll =
<wiki:toc/> 
= Introduktion =

Referensarkitekturen i sig innefattar främst dokument, se [Introduktion_till_RA] för en översikt. Utöver detta finns det referens-system, !PoCs, ramverkskod och kod för att generera upp skelett för system och komponenter. 

= CM-struktur =

Referensarkitekturen har följade CM-struktur (de flesta underkatalogerna har readme-filer som fungerar som introduktion till resp. katalogs innehåll): 

  * reference-architecture
    * trunk
      * docs - här under ligger dokumentationen (de delar som ej ligger i wikin)
      * src
        * archived - Innehåller äldre versioner av JAVG (pre Q3 2008) som sparats som referens. Se readme-filen i subversion för mer info. 
        * poc - Innehåller PoC-projekt, se [Teknisk_arkitektur] för mer info. 
        * ref-systems - Innehåller referenssystemen (i dagsläget endast ett). Se [Teknisk_arkitektur] och readme.txt för mer info.
        * runtime - Ramverkskod som stödjer referensarkitekturen. De byggda artefakterna härifrån anges som maven dependencies i de verksamhetskomponenter som bygger på referensarkitekturen. 
        * tools - Innehåller bl a verktyg för generering av källkodsstrukturen (i form av en mavenplugin). 

= Bygge =

Källkoden för referensarkitekturen i sig använder Maven som byggsystem, precis som projekt som baserar sig på referensarkitekturen. Man kan därför använda samma instruktioner för att komma igång med utveckling i referensarkitekturen i sig som med projekt baserade på referensarkitekturen, se [Anvisningar_Utvecklingsmiljo]. 

= Release = 

Att skapa en release: 

  * Kopiera från trunk till tag
{{{ 
svn copy -m "Taging for release"  https://oppna-program.googlecode.com/svn/reference-architecture/trunk/ 
https://oppna-program.googlecode.com/svn/reference-architecture/tags/<release version>
}}}
  * Checka ut tagen
{{{
svn co https://oppna-program.googlecode.com/svn/reference-architecture/tags/<release version>
}}}
  * Stega up versionen i trunk (ändra javg-versionen i alla pom-filer). Not: Om det är en milestone eller release candidate som releasas så behövs ej detta - då ska trunk ligga kvar på SNAPSHOT.
    * Stega även upp versionen under taggen <javg.version> i  [http://code.google.com/p/oppna-program/source/browse/reference-architecture/trunk/src/tools/maven-plugins/javg-template-plugin/src/main/template/__svn_repo/trunk/pom.xml template pomen] som används av maven-pluginen. Ex: `<javg.version>1.1-SNAPSHOT</javg.version>`
  * Gör commit på trunk (om versionen har stegats upp):
{{{
svn -m "Increasing version for new development in trunk" commit
}}}
  * Ändra versionen i alla pom-filer under tagen 
    * Ändra även versionen under taggen <javg.version> i filen /reference-architecture/branches/<release version>/src/tools/maven-plugins/javg-template-plugin/src/main/template/__svn_repo/trunk/pom.xml till aktuellt versionsnummer. Ex: `<javg.version>1.1-RC1</javg.version>` 
  * Gör commit på tagen:
{{{
svn -m "Setting version for release of <release version>" commit
}}}
  * Kontrollera så att googleCode-svn-serverns användarnamn och lösenord stämmer i mavenfilen $USER_HOME/.m2/settings.xml (se exempel [http://oppna-program.googlecode.com/svn/reference-architecture/trunk/src/tools/maven-settings/settings.xml här]). 
  * Kör sedan maven deploy i katalogen /tags/<release version>/src/ för att deploya maven-artefakterna till [https://oppna-program.googlecode.com/svn/maven maven-repot] (TODO: ev bör detta köras av byggservern):
{{{
mvn deploy
}}}
  * Samla ihop alla filer, inkl dokument, och skapa en src-download: 
    * Kör `maven clean` i src-katalogen för att ta bort alla target-folders.
    * Ta bort alla svn-foldrar, t ex (på Linux/Mac) med `find . -type d -name '*.svn' -print0 | xargs -0 rm -rdf`. Zippa ihop src+docs och lägg upp filen under downloads. 
  * Not: För icke-bakåtkompatibla releaser (major-versioner) av RA kan vissa wiki-sidor behöva sparas i enlighet med den tidigare versionen. Detta får bedömas från fall till fall. 
  * Not: Om en separat branch skulle behövas, t ex för buggfixar görs detta vid behov (dvs när första buggen skall fixas) genom att kopiera från tags till branches:
{{{ 
svn copy -m "Branching release"  https://oppna-program.googlecode.com/svn/reference-architecture/tags/<release version> 
https://oppna-program.googlecode.com/svn/reference-architecture/branches/<release version>
}}} 