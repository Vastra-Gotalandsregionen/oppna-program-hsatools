#summary Beskriver hur man utvecklar integrationstjänster och komponenttjänster i Java.
#labels RA


= Innehåll = 

<wiki:toc max_depth="3" />

= Introduktion =

Här beskrivs hur man implementerar integrationstjänster och komponenttjänster i form av webservices i Java enligt de mer generella riktlinjer som återfinns i [http://oppna-program.googlecode.com/svn/reference-architecture/Teknisk_arkitektur/Systemutveckling/Generellt/WebServices/Anvisningar_WSDL-design.doc Anvisningar_WSDL-design.doc] och [http://oppna-program.googlecode.com/svn/reference-architecture/Teknisk_arkitektur/Systemutveckling/Generellt/WebServices/Anvisningar_for_versionering_av_XML-Scheman.doc Anvisningar_for_versionering_av_XML-Scheman.doc].

För integrationstjänster gäller att XML-scheman källkodsmässigt skall placeras i projektet _schema_ och själva webservice-implementationen inkl wsdl-fil etc placeras i _intsvc_ - se [RA_Anvandarmanual_Kallkodstruktur] för ytterligare information. 

TODO: I dagsläget är det inte utrett var ev extra källkod för komponenttjänster skall ligga (utöver implementationen under _svc_), se [RA_Todo]. Nuvarande förslag är att, i de fall en komponenttjänst skall exponeras som en webservice (t ex för att göras tillgänglig från en portlet, en annan verksamhetskomponent eller en rik klient) skapa ett nytt projekt under modules där wsdl-fil, XML schema, (ev) källkod och Apache CXF-konfiguration får ligga. Not: Till skillnad från integrationstjänsterna så ägs en komponenttjänsts wsdl-fil och XML schema lokalt, inte av PTI. 

= Implementation av webservices = 

== Ramverk ==

För att implementera webservices i Java används ramverket [http://cxf.apache.org/ Apache CXF]. 

== Exempel == 

I referensapplikationen _addressbook_ finns ett exempel på en implementation av en integrationstjänst mha Apache CXF. De projekt som är av intresse är främst _schema_ och _intsvc_. 

=== schema ===

WSDL-fil och XML scheman för webservicen finns under `src/main/wsdl` i schema-projektet (i ett verkligt scenario har de kopierats hit från ett centralt repository som ägs av PTI). 

I maven-filen `pom.xml` finns exempel på hur man genererar upp bindningsfiler från ovanstående WSDL och XML Schema mha jax-ws.

=== intsvc === 
Själva implementationen av webservicen återfinns under `intsvc`. I `web.xml` under WEB-INF finns Apache CXFs servlet konfigurerad: 
{{{
<servlet>
	<servlet-name>CXFServlet</servlet-name>
	<servlet-class>
		org.apache.cxf.transport.servlet.CXFServlet
	</servlet-class>
	<load-on-startup>1</load-on-startup>
</servlet>

<servlet-mapping>
	<servlet-name>CXFServlet</servlet-name>
	<url-pattern>/*</url-pattern>
</servlet-mapping>
}}}

Apache CXF är integrerat i Spring och konfigureras mha Spring. Filen spring-cxf-config.xml (också under WEB-INF) innehåller konfiguration av webbservicen _AddressService_: 
{{{
<jaxws:endpoint id="Address.AddressEntryIntServiceSEI"
    implementor="#Address.AddressEntryIntService"
    address="/AddressService" />
}}}


I denna konfiguration har vi angett att tjänsten implementeras av `#Address.AddressEntryIntService`. Konfiguration av denna service finns i den vanliga `service-config.xml`-filen under `src/main/resources`: 
{{{
<bean id="Address.AddressEntryIntService"   
     class="se.vgr.javg.refsystems.addressbook.address.intsvc.AddressEntryIntServiceImpl">
	<property name="addressService"
	    ref="Address.AddressService" />
</bean>

}}}

Denna konfiguration injektar en `Address.AddressService` från `svc`-projektet i `Address.AddressEntryIntService`. Denna används i implementationen av webservicen.

= Konsumtion av webservices = 

== Ramverk ==

Precis som vid exponering av webservices används ramverket [http://cxf.apache.org/ Apache CXF] för konsumtion av webservices i Java. 

== Exempel == 

I referenssystemet `addressbook` finns en verksamhetskomponent `address-wsclient` som visar hur man konsumerar en webservice. 

Kompositen `main` innehåller en stand-alone Javaapplikation (packas ihop som en körbar jar-fil i applikationen `address-wsclient`) som har som enda syfte att anropa en webservice. Detta görs i klassen `se.vgr.javg.refsystems.addressbook.addresswsclient.AddressBookIntSvcClient`. Webservicen injektas mha Spring, se `services-config.xml` under `src/main/resources` för detaljer. Notera att adressen till webservicen anges som en del av Spring-konfigurationen. 




 