#summary Beskriver RA-systems och komponenters källkodstruktur samt packetering.
#labels RA

= Innehåll = 

<wiki:toc max_depth="3" />

= Introduktion =

Alla system som bygger på referensarkitekturen (RA) har en liknande källkodsstruktur i filsystemet och CM-systemet (subversion). Strukturen är direkt kopplad till RA och utgör grunden för en implementation av den. Vissa av kraven på referensarkitekturen, bland annat kravet på återanvändbara användningsfall, har en direkt koppling till strukturen. Den maven-plugin som följer med RA är beroende av att strukturen ser ut så som här beskrivs och nämnda plugin används också för att skapa den specifika strukturen. 

Här beskrivs på detaljnivå:
  * de ingående delarna i källkodsstrukturen
  * packeteringen av komponenter (jar, war och ear-filer)

För detaljer kring hur byggsystemet, baserat på Maven2, förhåller sig till källkodstrukturen, se [RA_Anvandarmanual_Beroenden_Mellan_Komponenter]. För konkreta exampel på hur Maven2-pluginen används för att generera  RA-system och komponenter, se [RA_Anvandarmanual_Utvecklingsmiljo].

= Källkodstruktur i system och verksamhetskomponenter =

Innehåll och användning av de olika delarna i strukturen beskrivs här.

== Strukturen inom ett system ==
Varje system innehåller en eller flera verksamhetskomponenter. När man skapar ett system med maven-pluginen skapas en struktur anpassad till subversion upp. Under systemet finns katalogerna branches, tags och trunk: 

http://oppna-program.googlecode.com/svn/wiki/bilder/RA/latest/RA_Anvandarmanual_Kallkodstruktur_SystemFilstruktur.png

Under trunk ligger byggfilen `pom.xml` för hela systemet samt kataloger för respektive verksamhetskomponent. I exemplet ovan innehåller `MyTestBC` den enda verksamhetskomponenten. 

== Strukturen inom en verksamhetskomponent ==
Direkt under `<SystemNamn>/trunk` ligger alltså alla verksamhetskomponenter för ett system. Varje verksamhetskomponent har i sin tur följade struktur: 

http://oppna-program.googlecode.com/svn/wiki/bilder/RA/latest/RA_Anvandarmanual_Kallkodstruktur_BCCMStructure.png

I filsystemet ser det ut såhär: 

http://oppna-program.googlecode.com/svn/wiki/bilder/RA/latest/RA_Anvandarmanual_Kallkodstruktur_BCFilstruktur.png 

Byggfilen `pom.xml` används för att bygga hela verksamhetskomponenten. Not: Katalogen `sql` syns inte i illustrationen ovan.
 
=== applications ===
 
Innehållet i `applications` beror på vilken typ av enhet som ska driftsättas. En del verksamhetskomponenter bidrar inte med någon applikation utan bara med kompositer, i det fallet finns heller inga moduler. Det är inte meningen att en applikation ska innehålla källkod (ska finnas i moduler och kompositer) förutom den extra kod som kan krävas för att producera till exempel en exekverbar JAR-fil (typiskt en klass med en main-metod).
Typiskt innehåll i en applikation är artefakter för att bygga:
  * EAR-filer
  * Java Webstart arkiv
  * Exekverbara JAR-filer 

=== modules ===
Innehåller källkod för integrationstjänster, som återfinns under `intsvc`, web-applikationer som återfinns i `web` och portlets, som finns under `portlets`. Strukturen inuti dessa följer den standardiserade Maven2-projektstrukturen (se [http://maven.apache.org Maven2]).
 
==== intsvc ====
Innehåller integrationstjänster i form av Webservices, JMS eller Connector för ingående trafik.

I fallet av Webservice finns även bindningsklasserna för WSDL-filen här (vi arbetar uteslutande enligt principen "contract-first", dvs bindningsklasserna genereras från WSDL-filen). Notera att själva kontraktet, i form av WSDL-fil och XML-scheman (se avsnittet _schema_ nedan), i enlighet med _principen om kanoniska tjänstegränssnitt_ och _principen för löst kopplade tjänster_ inte ägs av verksamhetskomponenten utan centralt. 

==== web ====
Innehåller en Webapplikation. Under `web` ligger endast den källkod som behövs för att packetera ihop ett antal kompositer till en webbapplikation, bland annat deployment deskriptorn `web.xml`. Alla vyfiler och övriga resurser skall finnas som återanvändbara kompositer under `composites`. 

TODO: beskriv rekommenderad uppbyggnad av en webapplikation med JAR-filer som innehåller vyfiler + resurser. Teknik: JSF, Facelets.
Se dokument !Anvisningar_Webb_lager.doc (inte klart än).

==== portlet ====
Not: Denna genereras ej av mavenpluginen i dagsläget då portlet-delen av RA är under uppbyggnad. I dagsläget får man skapa denna manuellt. 

Innehåller en Portlet. 

TODO: beskriv rekommenderad uppbyggnad av en portlet.
Referera till dokument !Anvisningar_Portletutveckling.doc (inte klart ännu).

=== composites ===

En komposit är en återanvändbar byggsten, till exempel en tjänst (som får anropas inom systemet, jmfr integrationstjänster i avsnittet [http://code.google.com/p/oppna-program/wiki/RA_Anvandarmanual_Kallkodstruktur#intsvc intsvc] ovan) eller ett antal sidor som tillsammans bildar en "dialog". Uppdelningen i kompositer härstammar bland annat från kravet på återanvändbara användningsfall. En verksamhetskomponent kan vara av typen att den bara bidrar med kompositer, ingen applikation (och då heller inga moduler). 

Respektive underkatalog innehåller den källkod som behövs för respektive komposit. Strukturen inuti komposit-delarna följer den standardiserade Maven2-projektstrukturen (se [http://maven.apache.org Maven2]).
==== svc ====
Tjänster för verksamhetskomponenten. Dessa tjänster exponeras bara inom systemet (och givetvis inom verksamhetskomponenten). För att exponera en tjänst utanför systemgränsen behöver den exponeras som en integrationstjänst, se avsnitt _intsvc_ ovan.
==== types ====
Gemensamma typer som kan användas inom verksamhetskomponenten eller systemet. Exempel: 

  * klasser som exponeras som parametrar i tjänsternas interface, inklusive exception-klasser (både "checked" och "unchecked")
  * hjälpklasser som underlättar tolkandet av parameterklasserna, till exempel en klass med statiska konstanter som definerar de värden som ett fält i en parameter-klass (DTO) tillåts ha. 
==== webcomp ====
TODO: beskriv hur webkomponenter i form av JAR-filer bidrar till en webapplikation/portlet. Hänger ihop med sektion _web_.
Referera till dokument !Anvisningar_Webb_lager.doc.
==== schema ====
Innehåller XML-scheman som används för integration via tjänster som beskrivs i _intsvc_ ovan.

Scheman används här för att generera JAXB-bindningsklasser (bindning mellan Java och XML) som används inom verksamhetskomponenten och systemet. 

XML-scheman ägs inte av verksamhetskomponenten. I enlighet med _principen om kanoniska tjänstegränssnitt_ och _principen för löst kopplade tjänster_ skall alla scheman ägas centralt (t ex finnas tillgängliga via en HTTP-server). Vid behov av schema i en verksamhetskomponent kopieras alla nödvändiga scheman (även inkluderade/importerade scheman) in i schema-biblioteket under verksamhetskomponenten.

=== sql ===
Förutom strukturen ovan skapas även en katalog `sql`, där eventuella sql-skript kan placeras. Denna syns inte i illustrationen ovan. 

== Packetering av en verksamhetskomponent == 
Inför deploy packeteras en verksamhetskomponent enligt följande:

http://oppna-program.googlecode.com/svn/wiki/bilder/RA/latest/RA_Anvandarmanual_Kallkodstruktur_BCHierarkin.png

En _applikation_ (vanligtvis i form av en ear-fil) innehåller ett antal _moduler_ (war-filer) som i sin tur innehåller _kompositer_ (jar-filer). 

Begreppet _applikation_ inom den tekniska arkitekturen innebär alltså en _packetering_ av den underliggande funktionaliteten i en verksamhetskompontent - att jämföra med begreppet _system_ som, inom den logiska arkitekturen, betecknar ett antal, hierarkiskt ordnade verksamhetskomponenter. 

Även moduler är främst att betrakta som _packeteringar_ av funktionalitet (även om de kan innehålla en del källkod - se ovan). 

== Namngivning ==
=== Namngivning av system ===
Varje systems namn måste vara globalt unikt för att undvika namnkollisioner vid driftsättning.
=== Namngivning av verksamhetskomponenter ===
Namngivning av komponenter:
TODO: namnkonvention, prefix för verksamhetskomponenter (t ex ”e” för entitet) – stäm av mot referensarkitekturen! Ej bestämt ännu (2006-12-18).




  